apiVersion: v1
kind: Namespace
metadata:
  name: mlflow-server

# postgresql-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-pv
  namespace: mlflow-server
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain 
  hostPath:
    path: mlflow-data/postgresql

# minio-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mlflow-minio-pv
  namespace: mlflow-server
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain 
  hostPath:
    path: mlflow-data/minio

#postgresql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: mlflow-server
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

#minio-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mlflow-minio-pvc
  namespace: mlflow-server
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: mlflow-server
  labels: 
    app.kubernetes.io/name: postgres
spec:
  type: NodePort
  ports:
  - name: postgres
    port: 5432
    nodePort: 30089
    protocol: TCP
    targetPort: postgres
  selector: 
    app.kubernetes.io/name: postgres
  
#postgres-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlflow-server
  labels: 
    app.kubernetes.io/name: postgres
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: postgres
    spec:
      containers:
      - image: "postgres:15-alpine3.20"
        imagePullPolicy: "IfNotPresent"
        name: postgres
        env:
        - name: POSTGRES_PASSWORD
          value: postgres 
        - name: POSTGRES_USER
          value: test
        - name: POSTGRES_DB
          value: test
        ports:
        - containerPort: 5432
          name: postgres
        resources: 
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgresql-pvc
            
#minio-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: mlflow-server
  labels: 
    app.kubernetes.io/name: minio
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: minio
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: minio
    spec:
      securityContext:
        fsGroup: 1001 
      containers:
      - image: "quay.io/minio/minio"
        imagePullPolicy: "IfNotPresent"
        name: minio
        env:
          - name: MINIO_ROOT_USER
            value: minio 
          - name: MINIO_ROOT_PASSWORD
            value: miniostorage
          - name: MINIO_DEFAULT_BUCKETS
            value: mlflow
          - name: MINIO_DATA_DIR
            value: "/data"
        ports:
        - containerPort: 9000
          name: minio
        - containerPort: 9001
          name: minio-console
        resources: 
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: mflow-minio-pvc
          
#minio-svc
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: mlflow-server
  labels: 
    app.kubernetes.io/name: minio
spec:
  type: NodePort
  ports:
  - name: minio
    nodePort: 30084
    port: 9000
    protocol: TCP
    targetPort: minio
  - name: minio-console
    nodePort: 30088
    port: 9001
    protocol: TCP
    targetPort: minio-console
  selector: 
    app.kubernetes.io/name: minio
    
#mlflow-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: mlflow-server
  labels: 
    app.kubernetes.io/name: mlflow
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: mlflow
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: mlflow
    spec:
      securityContext:
        fsGroup: 1001 
      containers:
      - command: ["mlflow"]
        args: ["server", "--host=0.0.0.0", --port=8080, "--backend-store-uri=postgresql://test:postgres@postgres:5432/test", "--serve-artifacts", "--artifacts-destination=s3://mlflow"]
        imagePullPolicy: Always
        image: pear1798/mlflow-server
        name: mlflow
        env:
          - name: AWS_ACCESS_KEY_ID
            value: minio 
          - name: AWS_SECRET_ACCESS_KEY
            value: miniostorage
          - name: MLFLOW_S3_IGNORE_TLS
            value: "true"
          - name: MLFLOW_S3_ENDPOINT_URL
            value: http://minio:9000


        ports:
        - containerPort: 8080
      restartPolicy: Always

#mlflow-svc
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-svc
  namespace: mlflow-server
spec:
  type: NodePort
  selector:
    mlflow-type: server
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: dashboard
    nodePort: 30005



